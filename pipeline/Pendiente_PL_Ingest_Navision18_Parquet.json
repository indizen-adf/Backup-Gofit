{
	"name": "Pendiente_PL_Ingest_Navision18_Parquet",
	"properties": {
		"description": "Los nombres de campos originales no son compatibles con el tipo de fichero Parquet porque contienen espacios en blanco y otros caracteres no soportados. S3e ha creado un pipeline con destino en CSV que funciona correctamente porque mapear todos los campos a mano sería un trabajo tremendo y hacerlo automáticamente es posible pero hay que sopesar si verdaderamente merece la pena.\nIngesta en el Data Lake de todas las tablas de origen del dominio seleccionado (solo las que estén activas)",
		"activities": [
			{
				"name": "Get_Entities_Names",
				"description": "El código SQL de lookup se coge de una variable y se ejecuta directamente, es para comprobar que funciona la ejecución de código dinámico completo.\nRecoge todas las entidades de un esquema de origen del catálogo de metadatos",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Prepare_Code",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@variables('SQLcode')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_dlcatalog_AzureSQL",
						"type": "DatasetReference",
						"parameters": {
							"Schema": "DLCatalog",
							"Table": "Entity"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Bucle_Ingesta_Entidades",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get_Entities_Names",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get_Entities_Names').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "EVAL_Refresh_Type",
							"description": "Dependiendo del tipo de refresco, ejecuta distintas actividades",
							"type": "Switch",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@string(item().REFRESH_TYPE)",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "Full",
										"activities": [
											{
												"name": "Ingest_Table_Full",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings",
															"maxRowsPerFile": 1000
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_Navision18_SQLServer",
														"type": "DatasetReference",
														"parameters": {
															"Table": "@item().TABLE_NAME"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Parquet_DataLake_Folder",
														"type": "DatasetReference",
														"parameters": {
															"Container": {
																"value": "@pipeline().globalParameters.GPR_Landing_Container",
																"type": "Expression"
															},
															"Domain": {
																"value": "@pipeline().globalParameters.GPR_DOM_FINANCE",
																"type": "Expression"
															},
															"Object": "@item().TABLE_NAME"
														}
													}
												]
											},
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "Ingest_Table_Full",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 30
												}
											}
										]
									},
									{
										"value": "Incremental",
										"activities": [
											{
												"name": "Ingest_Table_Incremental",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									},
									{
										"value": "Merge",
										"activities": [
											{
												"name": "Ingest_Table_Merge",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Prepare_Code",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "SQLcode",
					"value": {
						"value": "SELECT  EN.[EntityName] AS TABLE_NAME,  \n        EN.[EntitySchema] AS TABLE_SCHEMA, \n        RT.[RefreshTypeName] as REFRESH_TYPE \nFROM [DLCatalog].[Entity] EN\nINNER JOIN DLCatalog.RefreshType RT ON\nEN.RefreshTypeId = RT.RefreshTypeId  WHERE EN.[DomainId] = (SELECT DomainId from DLCatalog.Domain where DomainName = '@{pipeline().globalParameters.GPR_DOM_FINANCE}') AND EN.[EntityStatus] = 'A'\nAND EN.[EntityBatchIngest] = 'Y'",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"container": {
				"type": "string",
				"defaultValue": "landing"
			},
			"domain": {
				"type": "string",
				"defaultValue": "IngesportFinance"
			}
		},
		"variables": {
			"SQLcode": {
				"type": "String",
				"defaultValue": "-- SELECT PARA RECOGER METADATOS DEL CATALOGO"
			}
		},
		"folder": {
			"name": "Ingestion"
		},
		"annotations": [],
		"lastPublishTime": "2021-05-18T16:44:07Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}