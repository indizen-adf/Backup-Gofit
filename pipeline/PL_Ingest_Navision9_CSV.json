{
	"name": "PL_Ingest_Navision9_CSV",
	"properties": {
		"description": "Histórico de Navision 9. Sólo debe cargarse una vez, aunque es posible repetir la carga en caso de ser necesario. Ingesta en el Data Lake de todas las tablas de origen del dominio seleccionado (solo las que estén activas)",
		"activities": [
			{
				"name": "Get_Entities_Names",
				"description": "El código SQL de lookup se coge de una variable y se ejecuta directamente, es para comprobar que funciona la ejecución de código dinámico completo.\nRecoge todas las entidades de un esquema de origen del catálogo de metadatos",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Prepare_Code",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@variables('SQLcode')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_dlcatalog_AzureSQL",
						"type": "DatasetReference",
						"parameters": {
							"Schema": "DLCatalog",
							"Table": "Entity"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Bucle_Ingesta_Entidades",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get_Entities_Names",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get_Entities_Names').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "EVAL_Refresh_Type",
							"description": "Dependiendo del tipo de refresco, ejecuta distintas actividades",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "SiHayFicheros",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@string(item().REFRESH_TYPE)",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "Full",
										"activities": [
											{
												"name": "Ingest_Table_Full",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"maxRowsPerFile": 1000000,
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false,
													"parallelCopies": 3,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_Navision9_SQLServer",
														"type": "DatasetReference",
														"parameters": {
															"Table": "@item().TABLE_NAME"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_CSV_DataLake_Folder",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@pipeline().globalParameters.GPR_Landing_Container",
																"type": "Expression"
															},
															"domain": {
																"value": "@pipeline().globalParameters.GPR_DOM_FINANCE_HIST",
																"type": "Expression"
															},
															"object": "@item().TABLE_NAME"
														}
													}
												]
											}
										]
									},
									{
										"value": "Incremental",
										"activities": [
											{
												"name": "Ingest_Table_Incremental",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									},
									{
										"value": "Merge",
										"activities": [
											{
												"name": "Ingest_Table_Merge",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								]
							}
						},
						{
							"name": "Obtener_Metadatos",
							"description": "Coger metadatos del folder y los ficheros contenidos. Posteriormente se evalúa primero si existe el folder, porque si no existe, el atributo childitems no será generado por esta actividad y petará cualquier operación que intente usarlo",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "DS_CSV_DataLake_Folder",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@pipeline().globalParameters.GPR_Landing_Container",
											"type": "Expression"
										},
										"domain": {
											"value": "@pipeline().globalParameters.GPR_DOM_FINANCE_HIST",
											"type": "Expression"
										},
										"object": "@item().TABLE_NAME"
									}
								},
								"fieldList": [
									"childItems",
									"exists"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							}
						},
						{
							"name": "VAR_Existe",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Obtener_Metadatos",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "ExisteFolder",
								"value": {
									"value": "@activity('Obtener_Metadatos').output.exists",
									"type": "Expression"
								}
							}
						},
						{
							"name": "SiHayFicheros",
							"description": "Si el array con los ficheros del folder tiene longitud 0 (0 elementos) significa que está vacío, pero si es superior a 0 quiere decir que hay ficheros y por tanto hay que borrarlos. Aunque si se usa nobre de fichero, en lugar de folder, no sería necesario pues lo reemplaza",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Si_Existe_el_Folder",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(int(variables('HayFicheros')), 0)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "BorraFicheros",
										"description": "Si hay ficheros, los borra antes de cargar ya que de lo contrario insertará nuevos sobre los existentes",
										"type": "Delete",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "DS_CSV_DataLake_Folder",
												"type": "DatasetReference",
												"parameters": {
													"container": {
														"value": "@pipeline().globalParameters.GPR_Landing_Container",
														"type": "Expression"
													},
													"domain": {
														"value": "@pipeline().globalParameters.GPR_DOM_FINANCE",
														"type": "Expression"
													},
													"object": "@item().TABLE_NAME"
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										}
									}
								]
							}
						},
						{
							"name": "Si_Existe_el_Folder",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Obtener_Metadatos",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@activity('Obtener_Metadatos').output.exists",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "No_Hay_Ficheros",
										"description": "Si el folder no existe, no habrá ficheros que borrar, por lo que se fuerza a 0 en la variable a comprobar posteriormente. Para que no intenete borrar",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "HayFicheros",
											"value": {
												"value": "0",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Hay_Ficheros",
										"description": "Coger la longitud del array con los ficheros. Será 0 si está vacío",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "HayFicheros",
											"value": {
												"value": "@string(length(activity('Obtener_Metadatos').output.childitems))",
												"type": "Expression"
											}
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "Prepare_Code",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "SQLcode",
					"value": {
						"value": "SELECT  EN.[EntityName] AS TABLE_NAME,  \n        EN.[EntitySchema] AS TABLE_SCHEMA, \n        RT.[RefreshTypeName] as REFRESH_TYPE \nFROM [DLCatalog].[Entity] EN\nINNER JOIN DLCatalog.RefreshType RT ON\nEN.RefreshTypeId = RT.RefreshTypeId  WHERE EN.[DomainId] = (SELECT DomainId from DLCatalog.Domain where DomainName = '@{pipeline().globalParameters.GPR_DOM_FINANCE_HIST}') AND EN.[EntityStatus] = 'A'\nAND EN.[EntityBatchIngest] = 'Y'",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"container": {
				"type": "string",
				"defaultValue": "landing"
			},
			"domain": {
				"type": "string",
				"defaultValue": "IngesportFinanceHist"
			}
		},
		"variables": {
			"SQLcode": {
				"type": "String",
				"defaultValue": "-- SELECT PARA RECOGER METADATOS DEL CATALOGO"
			},
			"ExisteFolder": {
				"type": "Boolean"
			},
			"HayFicheros": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Ingestion/Historical_Data"
		},
		"annotations": [],
		"lastPublishTime": "2021-05-18T16:44:07Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}